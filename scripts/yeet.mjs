import { existsSync, readFileSync, writeFileSync } from 'node:fs';
import inquirer from 'inquirer';
import toml from 'toml';
import { uniqueNamesGenerator, animals, adjectives, NumberDictionary } from 'unique-names-generator';
import 'zx/globals';

const uniqueNameGen = (() => {
    const config = {
        dictionaries: [adjectives, animals, NumberDictionary.generate({ min: 1000, max: 9999 })],
        separator: "-",
    };

    return () => uniqueNamesGenerator(config);
})();

const fabricateOllamaHostFlyToml = ({ name, region, gpuKind }) => {
    return `# Generated by yeet.mjs

app = "${name}"
primary_region = "${region}"
vm.size = "${gpuKind}"

[http_service]
  internal_port = 11434
  force_https = false
  auto_stop_machines = true
  auto_start_machines = true
  min_machines_running = 0
  processes = ["app"]

[build]
  image = "ollama/ollama"

[mounts]
  source = "models"
  destination = "/root/.ollama"
  initial_size = "16gb"
`;
};

const fabricateAppFlyToml = ({ name, gpuAppName }) => {
    return `# Generated by yeet.mjs

app = "${name}"

[env]
  OLLAMA_HOST = "http://${gpuAppName}.flycast"

[build]

[http_service]
  internal_port = 3000
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true
  min_machines_running = 0
  processes = ['app']

[[vm]]
  memory = '1gb'
  cpu_kind = 'shared'
  cpus = 1
`;
};

let recreate = false;

const defaultName = (() => {
    if (existsSync("fly.toml")) {
        const flyToml = readFileSync("fly.toml", "utf-8");
        const { app, env } = toml.parse(flyToml);
        if (env.RECREATE) {
            recreate = true;
            return uniqueNameGen();
        }
        return app;
    }

    return uniqueNameGen();
})();

if (recreate) {
    console.log("Recreating app, removing existing fly.tomls");
    await $`rm fly.toml run/gpu/fly.toml`;
}

inquirer
    .prompt([
        {
            name: "org",
            message: "Which org should the GPU app be deployed to?",
            default: "personal",
        },
        {
            name: "gpuAppName",
            message: "What should the GPU app be called?",
            default: `gpu-${defaultName}`,
        },
        {
            name: "region",
            message: "Which region should the GPU app be deployed to?",
            default: "ord",
            choices: ["ord"],
        },
        {
            name: "gpuKind",
            message: "Which GPU kind should the GPU app use?",
            default: "a100-40gb",
            choices: ["a100-40gb", "l40s", "a10"],
        },
        {
            name: "appName",
            message: "What should the app be called?",
            default: defaultName,
        },
    ])
    .then(async ({ gpuAppName, region, gpuKind, org, appName }) => {
        if (!existsSync("run/gpu/fly.toml")) {
            console.log("run/gpu/fly.toml not found, creating GPU app first");
            await $`fly apps create -o ${org} ${gpuAppName}`;
            await $`mkdir -p "run/gpu"`;
            writeFileSync(`run/gpu/fly.toml`, fabricateOllamaHostFlyToml({ name: gpuAppName, region, gpuKind }));
            await $`cd run/gpu && fly ips allocate-v6 --private -a ${gpuAppName}`;
            console.log("deploying GPU app, this may take a hot minute...");
            await $`cd run/gpu && fly deploy`;
            console.log(`GPU app ${gpuAppName} deployed!`);
        }

        if (!existsSync("fly.toml")) {
            await $`fly apps create -o ${org} ${appName}`;
            writeFileSync("fly.toml", fabricateAppFlyToml({ name: appName, gpuAppName }));
        } else {
            console.log("fly.toml already exists, skipping app creation, setting OLLAMA_HOST secret to point to GPU app");
            await $`fly secrets set OLLAMA_HOST="http://${gpuAppName}.flycast"`;
        }
        console.log("deploying app, this may take a hot minute...");
        await $`fly deploy`;

        console.log(`App ${appName} deployed! Head to https://${appName}.fly.dev to see it in action!`);
    })
    .catch(error => {
        console.error(error);
    });